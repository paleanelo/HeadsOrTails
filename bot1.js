const { Bot, InlineKeyboard } = require("grammy");

const bot = new Bot("7571928004:AAHrG4wa_vp-ucAfGkRU-a6sWrequJFXovQ"); //RockPaperScissors_testtest_bot


bot.command("start", (ctx) => {
    ctx.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞'! ‚úä‚úã‚úåÔ∏è\n\n" +
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º.\n\n" +
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /play.\n" +
        "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
    );
});


bot.command("help", (ctx) => {
    ctx.reply(
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n" +
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n" +
        "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ö–∞–º–µ–Ω—å', '–ù–æ–∂–Ω–∏—Ü—ã' –∏–ª–∏ '–ë—É–º–∞–≥–∞'.\n" +
        "3. –ë–æ—Ç —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞–µ—Ç –≤—ã–±–æ—Ä.\n" +
        "4. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, —á—å—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–ª—å–Ω–µ–µ:\n" +
        "   - –ö–∞–º–µ–Ω—å –±—å–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã\n" +
        "   - –ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –±—É–º–∞–≥—É\n" +
        "   - –ë—É–º–∞–≥–∞ –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å\n\n" +
        "–£–¥–∞—á–∏!"
    );
});


const choices = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"];

function getBotChoice() {
    return choices[Math.floor(Math.random() * choices.length)];
}


function determineWinner(playerChoice, botChoice) {
    if (playerChoice === botChoice) {
        return "–ù–∏—á—å—è! ü§ù";
    }
    if (
        (playerChoice === "–ö–∞–º–µ–Ω—å" && botChoice === "–ù–æ–∂–Ω–∏—Ü—ã") ||
        (playerChoice === "–ù–æ–∂–Ω–∏—Ü—ã" && botChoice === "–ë—É–º–∞–≥–∞") ||
        (playerChoice === "–ë—É–º–∞–≥–∞" && botChoice === "–ö–∞–º–µ–Ω—å")
    ) {
        return "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ";
    }
    return "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üò¢";
}


bot.command("play", (ctx) => {
    startGame(ctx);
});


function startGame(ctx) {
    const keyboard = new InlineKeyboard()
        .text("–ö–∞–º–µ–Ω—å", "rock")
        .text("–ù–æ–∂–Ω–∏—Ü—ã", "scissors")
        .text("–ë—É–º–∞–≥–∞", "paper");

    ctx.reply("–°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:", { reply_markup: keyboard });
}


bot.on("callback_query:data", async (ctx) => {
    const userChoice = ctx.callbackQuery.data;

    if (userChoice === "rock" || userChoice === "scissors" || userChoice === "paper") {
        const userChoiceText =
            userChoice === "rock" ? "–ö–∞–º–µ–Ω—å" :
            userChoice === "scissors" ? "–ù–æ–∂–Ω–∏—Ü—ã" : "–ë—É–º–∞–≥–∞";
        const botChoice = getBotChoice();
        const result = determineWinner(userChoiceText, botChoice);

        await ctx.reply(
            `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${userChoiceText}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: ${botChoice}\n\n${result}`
        );

        const playAgainKeyboard = new InlineKeyboard()
            .text("–î–∞", "play_again")
            .text("–ù–µ—Ç", "end_game");

        await ctx.reply("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?", { reply_markup: playAgainKeyboard });
    } else if (userChoice === "play_again") {
        startGame(ctx);
    } else if (userChoice === "end_game") {
        await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞. üòä");
    }

    await ctx.answerCallbackQuery();
});


bot.start();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
