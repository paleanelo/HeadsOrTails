const { Bot, InlineKeyboard } = require("grammy");

const bot = new Bot("7673247740:AAHyf5P7fVbcEYh4Wrry_maaKOFzHWLMvgo"); //GuessTheNumber_testtest_bot


const userGames = {};


bot.command("start", (ctx) => {
    ctx.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'! ü§î\n\n" +
        "–Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, –∞ –≤—ã –¥–æ–ª–∂–Ω—ã –µ–≥–æ —É–≥–∞–¥–∞—Ç—å.\n" +
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /play.\n\n" +
        "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
    );
});


bot.command("help", (ctx) => {
    ctx.reply(
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n" +
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n" +
        "2. –Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n" +
        "3. –í—ã –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–≥–∞–¥–∞—Ç—å.\n" +
        "4. –Ø –ø–æ–¥—Å–∫–∞–∂—É, –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –≤–∞—à–µ —á–∏—Å–ª–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ.\n" +
        "5. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ —É–≥–∞–¥–∞–µ—Ç —á–∏—Å–ª–æ!\n\n" +
        "–£–¥–∞—á–∏! üéâ"
    );
});


bot.command("play", (ctx) => {
    const userId = ctx.from.id;

    const randomNumber = Math.floor(Math.random() * 100) + 1;
    userGames[userId] = { number: randomNumber, attempts: 0 };

    ctx.reply(
        "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
    );
});


bot.on("message:text", async (ctx) => {
    const userId = ctx.from.id;

    if (!userGames[userId]) {
        ctx.reply(
            "–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /play, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        );
        return;
    }

    const userGuess = parseInt(ctx.message.text, 10);
    const game = userGames[userId];


    if (isNaN(userGuess) || userGuess < 1 || userGuess > 100) {
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.");
        return;
    }

    game.attempts += 1;

    if (userGuess === game.number) {
        await ctx.reply(
            `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${game.number} –∑–∞ ${game.attempts} –ø–æ–ø—ã—Ç–æ–∫.`
        );

        const playAgainKeyboard = new InlineKeyboard()
            .text("–î–∞", "play_again")
            .text("–ù–µ—Ç", "end_game");

        await ctx.reply("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?", {
            reply_markup: playAgainKeyboard,
        });

        delete userGames[userId];
    } else if (userGuess < game.number) {
        ctx.reply("–ú–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!");
    } else {
        ctx.reply("–ú–æ—ë —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!");
    }
});


bot.on("callback_query:data", async (ctx) => {
    const userId = ctx.from.id;

    if (ctx.callbackQuery.data === "play_again") {

        const randomNumber = Math.floor(Math.random() * 100) + 1;
        userGames[userId] = { number: randomNumber, attempts: 0 };

        await ctx.reply(
            "–Ø –∑–∞–≥–∞–¥–∞–ª –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
        );
    } else if (ctx.callbackQuery.data === "end_game") {
        await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞. üòä");
    }

    await ctx.answerCallbackQuery();
});


bot.start();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');